@{
    this.ViewData["Title"] = "Chat";
}

<h1>@this.ViewData["Title"]</h1>

<div class="container">
    <div id="message-holder" class="mt-3 d-flex justify-content-start">
        <h4>Message</h4>
        <input class="w-75 ml-4 pl-3" type="text" id="messageInput" placeholder="Message..." />
        <button id="sendButton" class="ml-4 btn btn-dark btn-lg">Send</button>
    </div>
    <hr style="height: 5px;" class="bg-dark" />
    <div id="messagesList" >
    </div>
</div>

@section Scripts {
    <script src="~/lib/signalr/dist/browser/signalr.min.js"></script>
    <script>
        var connection =
            new signalR.HubConnectionBuilder()
                .withUrl("/chat")
                .withAutomaticReconnect()
                .build();

        connection.on("NewMessage",
            function (message) {
                var chatInfo = `<div>[${message.user}] ${message.text}</div>`;
                $("#messagesList").append(chatInfo);
            });

        $("#sendButton").click(function () {
            var message = $("#messageInput").val();

            connection.invoke("Send", message);
        });

        connection.start().catch(function (err) {
            return console.error(err);
        });

        const startSignalRConnection = connection => connection.start()
            .then(() => console.info('Websocket Connection Established'))
            .catch(err => console.error('SignalR Connection Error: ', err));

        // re-establish the connection if it is dropped
        connection.onclose(() => setTimeout(() => startSignalRConnection(connection), 5000));
    </script>
}